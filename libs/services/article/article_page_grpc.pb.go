// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: libs/services/article/article_page.proto

package article

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArticlePageService_AddPage_FullMethodName    = "/article.ArticlePageService/addPage"
	ArticlePageService_DeletePage_FullMethodName = "/article.ArticlePageService/deletePage"
)

// ArticlePageServiceClient is the client API for ArticlePageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticlePageServiceClient interface {
	AddPage(ctx context.Context, in *AddPageParam, opts ...grpc.CallOption) (*PageId, error)
	DeletePage(ctx context.Context, in *PageId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type articlePageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlePageServiceClient(cc grpc.ClientConnInterface) ArticlePageServiceClient {
	return &articlePageServiceClient{cc}
}

func (c *articlePageServiceClient) AddPage(ctx context.Context, in *AddPageParam, opts ...grpc.CallOption) (*PageId, error) {
	out := new(PageId)
	err := c.cc.Invoke(ctx, ArticlePageService_AddPage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *articlePageServiceClient) DeletePage(ctx context.Context, in *PageId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ArticlePageService_DeletePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlePageServiceServer is the server API for ArticlePageService service.
// All implementations must embed UnimplementedArticlePageServiceServer
// for forward compatibility
type ArticlePageServiceServer interface {
	AddPage(context.Context, *AddPageParam) (*PageId, error)
	DeletePage(context.Context, *PageId) (*empty.Empty, error)
	mustEmbedUnimplementedArticlePageServiceServer()
}

// UnimplementedArticlePageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticlePageServiceServer struct {
}

func (UnimplementedArticlePageServiceServer) AddPage(context.Context, *AddPageParam) (*PageId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPage not implemented")
}
func (UnimplementedArticlePageServiceServer) DeletePage(context.Context, *PageId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedArticlePageServiceServer) mustEmbedUnimplementedArticlePageServiceServer() {}

// UnsafeArticlePageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticlePageServiceServer will
// result in compilation errors.
type UnsafeArticlePageServiceServer interface {
	mustEmbedUnimplementedArticlePageServiceServer()
}

func RegisterArticlePageServiceServer(s grpc.ServiceRegistrar, srv ArticlePageServiceServer) {
	s.RegisterService(&ArticlePageService_ServiceDesc, srv)
}

func _ArticlePageService_AddPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlePageServiceServer).AddPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlePageService_AddPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlePageServiceServer).AddPage(ctx, req.(*AddPageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArticlePageService_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticlePageServiceServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArticlePageService_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticlePageServiceServer).DeletePage(ctx, req.(*PageId))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticlePageService_ServiceDesc is the grpc.ServiceDesc for ArticlePageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticlePageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "article.ArticlePageService",
	HandlerType: (*ArticlePageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addPage",
			Handler:    _ArticlePageService_AddPage_Handler,
		},
		{
			MethodName: "deletePage",
			Handler:    _ArticlePageService_DeletePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "libs/services/article/article_page.proto",
}
