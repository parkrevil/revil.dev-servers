package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"revil.dev-servers/graph"
	"revil.dev-servers/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (bool, error) {
	_, err := r.mongo.InsertOne(p.Context, User{
		Username:  input["username"].(string),
		Password:  input["password"].(string),
		Nickname:  input["nickname"].(string),
		Email:     input["email"].(string),
		ImageUrl:  input["imageUrl"].(string),
		CreatedAt: primitive.NewDateTimeFromTime(time.Now()),
	})
	if err != nil {
		return false, err
	}

	return true, nil

	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
